# Definition of the cluster credentials for authentication and backups.
apiVersion: v1
type: kubernetes.io/basic-auth

metadata:
  namespace: ${NAMESPACE}
  name: ${IDENTIFIER}-auth-secret

kind: Secret
data:
  username: ${DATABASE_USER}
  password: ${DATABASE_PASSWORD}
---
apiVersion: v1
kind: Secret

metadata:
  namespace: ${NAMESPACE}
  name: ${IDENTIFIER}-backup-secret

data:
  ACCESS_KEY_ID: ${DATABASE_BACKUP_ACCESS_KEY}
  ACCESS_SECRET_KEY: ${DATABASE_BACKUP_SECRET_KEY}
---
# Definition of the cluster with customizations (initialization, replicas, backups, monitoring and storage).
# Powered by Cloud Native PG (https://cloudnative-pg.io).
apiVersion: postgresql.cnpg.io/v1
kind: Cluster

metadata:
  namespace: ${NAMESPACE}
  name: ${IDENTIFIER}

spec:
  # PostgreSQL version.
  imageName: ghcr.io/cloudnative-pg/postgresql:${DATABASE_VERSION}
  imagePullPolicy: Always
  primaryUpdateStrategy: unsupervised

  # Number of nodes in the cluster.
  instances: ${NODES_COUNT}

  # Custom parameters.
  postgresql:
    parameters:
      "pgaudit.log": "all, -misc"
      "pgaudit.log_catalog": "off"
      "pgaudit.log_parameter": "on"
      "pgaudit.log_relation": "on"
      port: ${DATABASE_PORT}

  # Initialization.
  bootstrap:
    initdb:
      database: ${DATABASE_NAME}
      owner: ${DATABASE_OWNER}
      secret:
        name: ${IDENTIFIER}-auth-secret

  # Storage definition.
  storage:
    size: ${STORAGE_SIZE}Gi

  # Monitoring definition.
  monitoring:
    enablePodMonitor: true

  # Backup definition.
  backup:
    barmanObjectStore:
      destinationPath: s3://${IDENTIFIER}-${DATABASE_NAME}
      endpointURL: ${DATABASE_BACKUP_URL}
      s3Credentials:
        accessKeyId:
          name: ${IDENTIFIER}-backup-secret
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: ${IDENTIFIER}-backup-secret
          key: ACCESS_SECRET_KEY
    retentionPolicy: "${DATABASE_BACKUP_RETENTION}d"
---
# Definition of the backup schedule.
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup

metadata:
  namespace: ${NAMESPACE}
  name: ${IDENTIFIER}-backup

spec:
  # Cron based format.
  schedule: "${DATABASE_BACKUP_SCHEDULE}"
  suspend: false
  immediate: true
  backupOwnerReference: self
  cluster:
    name: ${IDENTIFIER}
---
# Definition of the cluster load balancers (primary and replicas).
apiVersion: v1
kind: Service

metadata:
  namespace: ${NAMESPACE}
  name: ${IDENTIFIER}-ingress-primary

spec:
  type: LoadBalancer

  selector:
    role: primary

  ports:
    - port: ${DATABASE_PORT}
      targetPort: ${DATABASE_PORT}
---
apiVersion: v1
kind: Service

metadata:
  namespace: ${NAMESPACE}
  name: ${IDENTIFIER}-ingress-replicas

spec:
  type: LoadBalancer

  selector:
    role: replica

  ports:
    - port: ${DATABASE_PORT}
      targetPort: ${DATABASE_PORT}