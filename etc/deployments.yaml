# Definition of the cluster (initialization, replicas, backups and storage).
# Powered by Cloud Native PG (https://cloudnative-pg.io).
apiVersion: postgresql.cnpg.io/v1
kind: Cluster

metadata:
  namespace: ${NAMESPACE}
  name: server

spec:
  # PostgreSQL version.
  imageName: ghcr.io/cloudnative-pg/postgresql:${DATABASE_VERSION}
  imagePullPolicy: Always
  primaryUpdateStrategy: unsupervised

  # Number of instances in the cluster.
  instances: ${NODES_COUNT}

  # Initialization definition.
  bootstrap:
    initdb:
      database: ${DATABASE_NAME}
      owner: ${DATABASE_OWNER}
      secret:
        name: auth-secret

  # Storage definition.
  storage:
    size: ${STORAGE_SIZE}Gi

  # Backup definition.
  backup:
    barmanObjectStore:
      destinationPath: s3://${DATABASE_NAME}
      endpointURL: ${DATABASE_BACKUP_URL}
      s3Credentials:
        accessKeyId:
          name: backup-secret
          key: accessKey
        secretAccessKey:
          name: backup-secret
          key: secretKey
    retentionPolicy: "${DATABASE_BACKUP_RETENTION}d"
---
# Definition of the backup scheduler for the cluster.
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup

metadata:
  namespace: ${NAMESPACE}
  name: scheduled-backup

spec:
  # Cron based format.
  schedule: "${DATABASE_BACKUP_SCHEDULE}"
  suspend: false
  immediate: true
  backupOwnerReference: self
  cluster:
    name: server
---
# Definition of the cluster monitoring agent.
apiVersion: apps/v1
kind: Deployment

metadata:
  namespace: ${NAMESPACE}
  name: monitoring-agent

spec:
  replicas: 1
  strategy:
    type: RollingUpdate

  selector:
    matchLabels:
      app: monitoring-agent

  template:
    metadata:
      labels:
        app: monitoring-agent

    spec:
      restartPolicy: Always

      containers:
        - name: monitoring-agent
          image: prometheuscommunity/postgres-exporter:v0.17.1
          imagePullPolicy: Always
          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: monitoring-secret
                  key: url
          ports:
            - containerPort: 9187
---
# Definition of the cluster monitoring server.
apiVersion: apps/v1
kind: Deployment

metadata:
  namespace: ${NAMESPACE}
  name: monitoring-server

spec:
  replicas: 1
  strategy:
    type: RollingUpdate

  selector:
    matchLabels:
      app: monitoring-server

  template:
    metadata:
      labels:
        app: monitoring-server

    spec:
      restartPolicy: Always

      containers:
        - name: monitoring-server
          image: prom/prometheus:v3.2.1
          imagePullPolicy: Always
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: monitoring-server-settings
              mountPath: /etc/prometheus

      volumes:
        - name: monitoring-server-settings
          configMap:
            name: monitoring-server-settings